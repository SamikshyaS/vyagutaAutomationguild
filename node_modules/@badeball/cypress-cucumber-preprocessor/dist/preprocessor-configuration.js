"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = exports.combineIntoConfiguration = exports.COMPILED_REPORTER_ENTRYPOINT = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const util_1 = __importDefault(require("util"));
const debug_1 = __importDefault(require("./helpers/debug"));
const paths_1 = require("./helpers/paths");
const type_guards_1 = require("./helpers/type-guards");
function hasOwnProperty(value, property) {
    return Object.prototype.hasOwnProperty.call(value, property);
}
function isPlainObject(value) {
    return (value === null || value === void 0 ? void 0 : value.constructor) === Object;
}
function validateUserConfigurationEntry(key, value) {
    switch (key) {
        case "stepDefinitions":
            if (!(0, type_guards_1.isStringOrStringArray)(value)) {
                throw new Error(`Expected a string or array of strings (stepDefinitions), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "messages": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (messages), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (messages.enabled), but got ${util_1.default.inspect(value.enabled)}`);
            }
            let output;
            if (hasOwnProperty(value, "output")) {
                if ((0, type_guards_1.isString)(value.output)) {
                    output = value.output;
                }
                else {
                    throw new Error(`Expected a string (messages.output), but got ${util_1.default.inspect(value.output)}`);
                }
            }
            const messagesConfig = {
                enabled: value.enabled,
                output,
            };
            return { [key]: messagesConfig };
        }
        case "json": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (json), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (json.enabled), but got ${util_1.default.inspect(value.enabled)}`);
            }
            let output;
            if (hasOwnProperty(value, "output")) {
                if ((0, type_guards_1.isString)(value.output)) {
                    output = value.output;
                }
                else {
                    throw new Error(`Expected a string (json.output), but got ${util_1.default.inspect(value.output)}`);
                }
            }
            const messagesConfig = {
                enabled: value.enabled,
                output,
            };
            return { [key]: messagesConfig };
        }
        case "html": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (html), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (html.enabled), but got ${util_1.default.inspect(value.enabled)}`);
            }
            let output;
            if (hasOwnProperty(value, "output")) {
                if ((0, type_guards_1.isString)(value.output)) {
                    output = value.output;
                }
                else {
                    throw new Error(`Expected a string (html.output), but got ${util_1.default.inspect(value.output)}`);
                }
            }
            const messagesConfig = {
                enabled: value.enabled,
                output,
            };
            return { [key]: messagesConfig };
        }
        case "pretty": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (pretty), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (pretty.enabled), but got ${util_1.default.inspect(value.enabled)}`);
            }
            const prettyConfig = {
                enabled: value.enabled,
            };
            return { [key]: prettyConfig };
        }
        case "filterSpecs": {
            if (!(0, type_guards_1.isBoolean)(value)) {
                throw new Error(`Expected a boolean (filterSpecs), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        }
        case "omitFiltered": {
            if (!(0, type_guards_1.isBoolean)(value)) {
                throw new Error(`Expected a boolean (omitFiltered), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        }
        case "e2e":
            return { [key]: validateUserConfiguration(value) };
        case "component":
            return { [key]: validateUserConfiguration(value) };
        default:
            return {};
    }
}
function validateUserConfiguration(configuration) {
    if (!isPlainObject(configuration)) {
        throw new Error(`Malformed configuration, expected an object, but got ${util_1.default.inspect(configuration)}`);
    }
    return Object.assign({}, ...Object.entries(configuration).map((entry) => validateUserConfigurationEntry(...entry)));
}
function validateEnvironmentOverrides(environment) {
    const overrides = {};
    if (hasOwnProperty(environment, "stepDefinitions")) {
        const { stepDefinitions } = environment;
        if ((0, type_guards_1.isStringOrStringArray)(stepDefinitions)) {
            overrides.stepDefinitions = stepDefinitions;
        }
        else {
            throw new Error(`Expected a string or array of strings (stepDefinitions), but got ${util_1.default.inspect(stepDefinitions)}`);
        }
    }
    if (hasOwnProperty(environment, "messagesEnabled")) {
        const { messagesEnabled } = environment;
        if ((0, type_guards_1.isBoolean)(messagesEnabled)) {
            overrides.messagesEnabled = messagesEnabled;
        }
        else if ((0, type_guards_1.isString)(messagesEnabled)) {
            overrides.messagesEnabled = stringToMaybeBoolean(messagesEnabled);
        }
        else {
            throw new Error(`Expected a boolean (messagesEnabled), but got ${util_1.default.inspect(messagesEnabled)}`);
        }
    }
    if (hasOwnProperty(environment, "messagesOutput")) {
        const { messagesOutput } = environment;
        if ((0, type_guards_1.isString)(messagesOutput)) {
            overrides.messagesOutput = messagesOutput;
        }
        else {
            throw new Error(`Expected a string (messagesOutput), but got ${util_1.default.inspect(messagesOutput)}`);
        }
    }
    if (hasOwnProperty(environment, "jsonEnabled")) {
        const { jsonEnabled } = environment;
        if ((0, type_guards_1.isBoolean)(jsonEnabled)) {
            overrides.jsonEnabled = jsonEnabled;
        }
        else if ((0, type_guards_1.isString)(jsonEnabled)) {
            overrides.jsonEnabled = stringToMaybeBoolean(jsonEnabled);
        }
        else {
            throw new Error(`Expected a boolean (jsonEnabled), but got ${util_1.default.inspect(jsonEnabled)}`);
        }
    }
    if (hasOwnProperty(environment, "jsonOutput")) {
        const { jsonOutput } = environment;
        if ((0, type_guards_1.isString)(jsonOutput)) {
            overrides.jsonOutput = jsonOutput;
        }
        else {
            throw new Error(`Expected a string (jsonOutput), but got ${util_1.default.inspect(jsonOutput)}`);
        }
    }
    if (hasOwnProperty(environment, "htmlEnabled")) {
        const { htmlEnabled } = environment;
        if ((0, type_guards_1.isBoolean)(htmlEnabled)) {
            overrides.htmlEnabled = htmlEnabled;
        }
        else if ((0, type_guards_1.isString)(htmlEnabled)) {
            overrides.htmlEnabled = stringToMaybeBoolean(htmlEnabled);
        }
        else {
            throw new Error(`Expected a boolean (htmlEnabled), but got ${util_1.default.inspect(htmlEnabled)}`);
        }
    }
    if (hasOwnProperty(environment, "htmlOutput")) {
        const { htmlOutput } = environment;
        if ((0, type_guards_1.isString)(htmlOutput)) {
            overrides.htmlOutput = htmlOutput;
        }
        else {
            throw new Error(`Expected a string (htmlOutput), but got ${util_1.default.inspect(htmlOutput)}`);
        }
    }
    if (hasOwnProperty(environment, "prettyEnabled")) {
        const { prettyEnabled } = environment;
        if ((0, type_guards_1.isBoolean)(prettyEnabled)) {
            overrides.prettyEnabled = prettyEnabled;
        }
        else if ((0, type_guards_1.isString)(prettyEnabled)) {
            overrides.prettyEnabled = stringToMaybeBoolean(prettyEnabled);
        }
        else {
            throw new Error(`Expected a boolean (prettyEnabled), but got ${util_1.default.inspect(prettyEnabled)}`);
        }
    }
    if (hasOwnProperty(environment, "filterSpecs")) {
        const { filterSpecs } = environment;
        if ((0, type_guards_1.isBoolean)(filterSpecs)) {
            overrides.filterSpecs = filterSpecs;
        }
        else if ((0, type_guards_1.isString)(filterSpecs)) {
            overrides.filterSpecs = stringToMaybeBoolean(filterSpecs);
        }
        else {
            throw new Error(`Expected a boolean (filterSpecs), but got ${util_1.default.inspect(filterSpecs)}`);
        }
    }
    if (hasOwnProperty(environment, "omitFiltered")) {
        const { omitFiltered } = environment;
        if ((0, type_guards_1.isBoolean)(omitFiltered)) {
            overrides.omitFiltered = omitFiltered;
        }
        else if ((0, type_guards_1.isString)(omitFiltered)) {
            overrides.omitFiltered = stringToMaybeBoolean(omitFiltered);
        }
        else {
            throw new Error(`Expected a boolean (omitFiltered), but got ${util_1.default.inspect(omitFiltered)}`);
        }
    }
    return overrides;
}
function stringToMaybeBoolean(value) {
    if (value === "") {
        return;
    }
    const falsyValues = ["0", "false"];
    if (falsyValues.includes(value)) {
        return false;
    }
    else {
        return true;
    }
}
const DEFAULT_STEP_DEFINITIONS = [
    "[integration-directory]/[filepath]/**/*.{js,mjs,ts,tsx}",
    "[integration-directory]/[filepath].{js,mjs,ts,tsx}",
    "cypress/support/step_definitions/**/*.{js,mjs,ts,tsx}",
];
exports.COMPILED_REPORTER_ENTRYPOINT = "dist/subpath-entrypoints/pretty-reporter.js";
function combineIntoConfiguration(configuration, overrides, cypress, implicitIntegrationFolder) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;
    const defaultStepDefinitions = DEFAULT_STEP_DEFINITIONS.map((pattern) => pattern.replace("[integration-directory]", (0, paths_1.ensureIsRelative)(cypress.projectRoot, implicitIntegrationFolder)));
    const specific = configuration[cypress.testingType];
    const unspecific = configuration;
    const stepDefinitions = (_b = (_a = overrides.stepDefinitions) !== null && _a !== void 0 ? _a : unspecific.stepDefinitions) !== null && _b !== void 0 ? _b : defaultStepDefinitions;
    const json = {
        enabled: (_g = (_e = (_c = overrides.jsonEnabled) !== null && _c !== void 0 ? _c : (_d = specific === null || specific === void 0 ? void 0 : specific.json) === null || _d === void 0 ? void 0 : _d.enabled) !== null && _e !== void 0 ? _e : (_f = unspecific.json) === null || _f === void 0 ? void 0 : _f.enabled) !== null && _g !== void 0 ? _g : false,
        output: (_m = (_k = (_h = overrides.jsonOutput) !== null && _h !== void 0 ? _h : (_j = specific === null || specific === void 0 ? void 0 : specific.json) === null || _j === void 0 ? void 0 : _j.output) !== null && _k !== void 0 ? _k : (_l = unspecific.json) === null || _l === void 0 ? void 0 : _l.output) !== null && _m !== void 0 ? _m : "cucumber-report.json",
    };
    const html = {
        enabled: (_s = (_q = (_o = overrides.htmlEnabled) !== null && _o !== void 0 ? _o : (_p = specific === null || specific === void 0 ? void 0 : specific.html) === null || _p === void 0 ? void 0 : _p.enabled) !== null && _q !== void 0 ? _q : (_r = unspecific.html) === null || _r === void 0 ? void 0 : _r.enabled) !== null && _s !== void 0 ? _s : false,
        output: (_x = (_v = (_t = overrides.htmlOutput) !== null && _t !== void 0 ? _t : (_u = specific === null || specific === void 0 ? void 0 : specific.html) === null || _u === void 0 ? void 0 : _u.output) !== null && _v !== void 0 ? _v : (_w = unspecific.html) === null || _w === void 0 ? void 0 : _w.output) !== null && _x !== void 0 ? _x : "cucumber-report.html",
    };
    const messages = {
        enabled: json.enabled ||
            html.enabled ||
            ((_2 = (_0 = (_y = overrides.messagesEnabled) !== null && _y !== void 0 ? _y : (_z = specific === null || specific === void 0 ? void 0 : specific.messages) === null || _z === void 0 ? void 0 : _z.enabled) !== null && _0 !== void 0 ? _0 : (_1 = unspecific.messages) === null || _1 === void 0 ? void 0 : _1.enabled) !== null && _2 !== void 0 ? _2 : false),
        output: (_7 = (_5 = (_3 = overrides.messagesOutput) !== null && _3 !== void 0 ? _3 : (_4 = specific === null || specific === void 0 ? void 0 : specific.messages) === null || _4 === void 0 ? void 0 : _4.output) !== null && _5 !== void 0 ? _5 : (_6 = unspecific.messages) === null || _6 === void 0 ? void 0 : _6.output) !== null && _7 !== void 0 ? _7 : "cucumber-messages.ndjson",
    };
    const pretty = {
        enabled: (_12 = (_10 = (_8 = overrides.prettyEnabled) !== null && _8 !== void 0 ? _8 : (_9 = specific === null || specific === void 0 ? void 0 : specific.pretty) === null || _9 === void 0 ? void 0 : _9.enabled) !== null && _10 !== void 0 ? _10 : (_11 = unspecific.pretty) === null || _11 === void 0 ? void 0 : _11.enabled) !== null && _12 !== void 0 ? _12 : false,
    };
    const filterSpecs = (_15 = (_14 = (_13 = overrides.filterSpecs) !== null && _13 !== void 0 ? _13 : specific === null || specific === void 0 ? void 0 : specific.filterSpecs) !== null && _14 !== void 0 ? _14 : unspecific.filterSpecs) !== null && _15 !== void 0 ? _15 : false;
    const omitFiltered = (_18 = (_17 = (_16 = overrides.omitFiltered) !== null && _16 !== void 0 ? _16 : specific === null || specific === void 0 ? void 0 : specific.omitFiltered) !== null && _17 !== void 0 ? _17 : unspecific.omitFiltered) !== null && _18 !== void 0 ? _18 : false;
    return {
        stepDefinitions,
        messages,
        json,
        html,
        pretty,
        filterSpecs,
        omitFiltered,
        implicitIntegrationFolder,
    };
}
exports.combineIntoConfiguration = combineIntoConfiguration;
async function cosmiconfigResolver(projectRoot) {
    const result = await (0, cosmiconfig_1.cosmiconfig)("cypress-cucumber-preprocessor").search(projectRoot);
    return result === null || result === void 0 ? void 0 : result.config;
}
async function resolve(cypressConfig, environment, implicitIntegrationFolder, configurationFileResolver = cosmiconfigResolver) {
    const result = await configurationFileResolver(cypressConfig.projectRoot);
    const environmentOverrides = validateEnvironmentOverrides(environment);
    (0, debug_1.default)(`resolved environment overrides ${util_1.default.inspect(environmentOverrides)}`);
    let explicitConfiguration;
    if (result) {
        explicitConfiguration = validateUserConfiguration(result);
        (0, debug_1.default)(`resolved explicit user configuration ${util_1.default.inspect(explicitConfiguration)}`);
    }
    else {
        explicitConfiguration = {};
        (0, debug_1.default)("resolved no explicit user configuration");
    }
    const configuration = combineIntoConfiguration(explicitConfiguration, environmentOverrides, cypressConfig, implicitIntegrationFolder);
    if (cypressConfig.reporter.endsWith(exports.COMPILED_REPORTER_ENTRYPOINT)) {
        (0, debug_1.default)("detected use of @badeball/cypress-cucumber-preprocessor/pretty-reporter, enabling pretty output");
        configuration.pretty.enabled = true;
    }
    (0, debug_1.default)(`resolved configuration ${util_1.default.inspect(configuration)}`);
    return configuration;
}
exports.resolve = resolve;
